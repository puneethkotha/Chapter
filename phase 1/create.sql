-- Enable foreign key checks
SET FOREIGN_KEY_CHECKS=1;
-- Create tables
CREATE TABLE PJI_AUTHOR (
AUTHOR_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR AUTHOR',
FNAME VARCHAR(50) NOT NULL COMMENT 'FIRST NAME OF AUTHOR',
LNAME VARCHAR(50) NOT NULL COMMENT 'LAST NAME OF AUTHOR',
STREET VARCHAR(50) NOT NULL COMMENT 'STREET NAME',
CITY VARCHAR(50) NOT NULL COMMENT 'CITY NAME',
STATE VARCHAR(50),
COUNTRY VARCHAR(50) NOT NULL,
POSTAL_CODE BIGINT NOT NULL,
EMAIL VARCHAR(50) NOT NULL COMMENT 'EMAIL ADDRESS',
PRIMARY KEY (AUTHOR_ID)
);
CREATE TABLE PJI_TOPIC (
TOPIC_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR TOPICS',
TOPIC_NAME VARCHAR(50) NOT NULL COMMENT 'NAME OF THE TOPIC',
PRIMARY KEY (TOPIC_ID)
);
CREATE TABLE PJI_BOOK (
BOOK_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR BOOK',
BOOK_NAME VARCHAR(100) NOT NULL COMMENT 'NAME OF THE BOOK',
PJI_TOPIC_TOPIC_ID BIGINT,
PRIMARY KEY (BOOK_ID),
CONSTRAINT FK_PJI_BOOK_TOPIC FOREIGN KEY (PJI_TOPIC_TOPIC_ID) REFERENCES
PJI_TOPIC(TOPIC_ID)
);
CREATE TABLE PJI_BOOK_COPY (
COPY_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR COPY',
STATUS ENUM('available', 'not available') NOT NULL COMMENT 'STATUS OF THE BOOK COPY',
PJI_BOOK_BOOK_ID BIGINT NOT NULL,
PRIMARY KEY (COPY_ID),
CONSTRAINT FK_PJI_BOOK_COPY_BOOK FOREIGN KEY (PJI_BOOK_BOOK_ID) REFERENCES
PJI_BOOK(BOOK_ID)
);
CREATE TABLE PJI_CUSTOMER (
CUST_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR CUSTOMER',
FNAME VARCHAR(50) NOT NULL COMMENT 'FIRST NAME OF THE CUSTOMER',
LNAME VARCHAR(50) NOT NULL COMMENT 'LAST NAME OF THE CUSTOMER',
PHONE VARCHAR(15) NOT NULL COMMENT 'PHONE NUMBER',
EMAIL VARCHAR(50) NOT NULL COMMENT 'EMAIL ADDRESS',
ID_TYPE ENUM('Passport', 'SSN', 'Driver License') NOT NULL COMMENT 'IDENTIFICATION TYPE',
ID_NO VARCHAR(30) NOT NULL COMMENT 'IDENTIFIER NUMBER',
PRIMARY KEY (CUST_ID)
);
CREATE TABLE PJI_EVENT (
EVENT_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR EVENT',
EVENT_NAME VARCHAR(100) NOT NULL COMMENT 'NAME OF THE EVENT',
START_DT DATETIME NOT NULL COMMENT 'START DATE TIME OF THE EVENT',
END_DT DATETIME NOT NULL COMMENT 'END DATE TIME OF THE EVENT',
ATTD_NO BIGINT NOT NULL COMMENT 'ESTIMATED NUMBER OF ATTENDEES',
EVENT_TYPE ENUM('S', 'E') NOT NULL COMMENT 'S for Seminar, E for Exhibition',
PRIMARY KEY (EVENT_ID)
);
CREATE TABLE PJI_EXHIBITION (
EVENT_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR EVENT',
EXPENSES DECIMAL(10,2) NOT NULL COMMENT 'ESTIMATED EXPENSES OF THE EXHIBITION',
PRIMARY KEY (EVENT_ID),
CONSTRAINT FK_PJI_EXHIBITION_EVENT FOREIGN KEY (EVENT_ID) REFERENCES PJI_EVENT(EVENT_ID)
);
CREATE TABLE PJI_SPONSOR (
SPONSOR_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR SPONSOR',
SPONSOR_TYPE ENUM('I', 'O') NOT NULL COMMENT 'I for Individual, O for Organization',
PRIMARY KEY (SPONSOR_ID)
);
CREATE TABLE PJI_INDIVIDUAL (
SPONSOR_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR SPONSOR',
FNAME VARCHAR(50) NOT NULL COMMENT 'FIRST NAME OF THE INDIVIDUAL',
LNAME VARCHAR(50) NOT NULL COMMENT 'LAST NAME OF THE INDIVIDUAL',
PRIMARY KEY (SPONSOR_ID),
CONSTRAINT FK_PJI_INDIVIDUAL_SPONSOR FOREIGN KEY (SPONSOR_ID) REFERENCES
PJI_SPONSOR(SPONSOR_ID)
);
CREATE TABLE PJI_ORG (
SPONSOR_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR SPONSOR',
ORG_NAME VARCHAR(50) NOT NULL COMMENT 'ORGANIZATION NAME',
PRIMARY KEY (SPONSOR_ID),
CONSTRAINT FK_PJI_ORG_SPONSOR FOREIGN KEY (SPONSOR_ID) REFERENCES
PJI_SPONSOR(SPONSOR_ID)
);
CREATE TABLE PJI_INVOICE (
INVOICE_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR INVOICE',
INVOICE_DATE DATETIME NOT NULL COMMENT 'DATE OF THE INVOICE',
INVOICE_AMT DECIMAL(10,2) NOT NULL COMMENT 'INVOICE AMOUNT',
PRIMARY KEY (INVOICE_ID)
);
CREATE TABLE PJI_RENTAL (
RENTAL_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR RENTAL',
STATUS ENUM('Borrowed', 'Returned', 'Late', 'Lost') NOT NULL COMMENT 'STATUS OF THE RENTAL',
BORROW_DATE DATETIME NOT NULL COMMENT 'DATE OF THE BORROWING',
EXP_RETURN_DT DATETIME NOT NULL COMMENT 'EXPECTED RETURN DATE',
ACTUAL_RETURN_DT DATETIME DEFAULT NULL COMMENT 'ACTUAL RETURN DATE',
PJI_CUSTOMER_CUST_ID BIGINT,
PJI_INVOICE_INVOICE_ID BIGINT,
PJI_BOOK_COPY_COPY_ID BIGINT,
PRIMARY KEY (RENTAL_ID),
CONSTRAINT FK_PJI_RENTAL_CUSTOMER FOREIGN KEY (PJI_CUSTOMER_CUST_ID) REFERENCES
PJI_CUSTOMER(CUST_ID),
CONSTRAINT FK_PJI_RENTAL_INVOICE FOREIGN KEY (PJI_INVOICE_INVOICE_ID) REFERENCES
PJI_INVOICE(INVOICE_ID),
CONSTRAINT FK_PJI_RENTAL_BOOK_COPY FOREIGN KEY (PJI_BOOK_COPY_COPY_ID) REFERENCES
PJI_BOOK_COPY(COPY_ID)
);
CREATE TABLE PJI_PAYMENT (
PAYMENT_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR PAYMENT',
PAYMENT_DATE DATETIME NOT NULL COMMENT 'DATE OF PAYMENT',
PAY_METHOD ENUM('Cash', 'Credit', 'Debit', 'PayPal') NOT NULL COMMENT 'PAYMENT METHOD',
CARDHOLDER_NAME VARCHAR(100) COMMENT 'NULLABLE, REQUIRED IF METHOD IS CREDIT/DEBIT',
PAYMENT_AMT DECIMAL(10,2) NOT NULL COMMENT 'PAYMENT AMOUNT',
PJI_INVOICE_INVOICE_ID BIGINT,
PRIMARY KEY (PAYMENT_ID),
CONSTRAINT FK_PJI_PAYMENT_INVOICE FOREIGN KEY (PJI_INVOICE_INVOICE_ID) REFERENCES
PJI_INVOICE(INVOICE_ID)
);
CREATE TABLE PJI_BOOK_AUTHOR (
PJI_BOOK_BOOK_ID BIGINT NOT NULL,
PJI_AUTHOR_AUTHOR_ID BIGINT NOT NULL,
PRIMARY KEY (PJI_BOOK_BOOK_ID, PJI_AUTHOR_AUTHOR_ID),
CONSTRAINT FK_PJI_BOOK_AUTHOR_BOOK FOREIGN KEY (PJI_BOOK_BOOK_ID) REFERENCES
PJI_BOOK(BOOK_ID),
CONSTRAINT FK_PJI_BOOK_AUTHOR_AUTHOR FOREIGN KEY (PJI_AUTHOR_AUTHOR_ID) REFERENCES
PJI_AUTHOR(AUTHOR_ID)
);
CREATE TABLE PJI_STUDY_ROOM (
ROOM_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR ROOM',
CAPACITY TINYINT UNSIGNED NOT NULL COMMENT 'CAPACITY OF THE STUDY ROOM',
PRIMARY KEY (ROOM_ID)
);
CREATE TABLE PJI_RESERVATION (
RESERVE_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR
RESERVATION',
TOPIC_DESC VARCHAR(255) NOT NULL COMMENT 'DESCRIPTION OF THE TOPIC',
START_DT DATETIME NOT NULL COMMENT 'START DATE TIME',
END_DT DATETIME NOT NULL COMMENT 'END DATE TIME',
GROUP_SIZE TINYINT UNSIGNED NOT NULL COMMENT 'SIZE OF THE GROUP',
PJI_CUSTOMER_CUST_ID BIGINT,
PJI_STUDY_ROOM_ROOM_ID BIGINT,
PRIMARY KEY (RESERVE_ID),
CONSTRAINT FK_PJI_RESERVATION_CUSTOMER FOREIGN KEY (PJI_CUSTOMER_CUST_ID) REFERENCES
PJI_CUSTOMER(CUST_ID),
CONSTRAINT FK_PJI_RESERVATION_STUDY_ROOM FOREIGN KEY (PJI_STUDY_ROOM_ROOM_ID)
REFERENCES PJI_STUDY_ROOM(ROOM_ID)
);
CREATE TABLE PJI_SEMINAR (
EVENT_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR EVENT',
EST_AUTH SMALLINT UNSIGNED COMMENT 'ESTIMATED NUMBER OF AUTHORS PARTICIPATING IN A
SEMINAR',
PRIMARY KEY (EVENT_ID),
CONSTRAINT FK_PJI_SEMINAR_EVENT FOREIGN KEY (EVENT_ID) REFERENCES PJI_EVENT(EVENT_ID)
);
CREATE TABLE PJI_SEMINAR_ATTD (
INVITATION_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR INVITATION',
PJI_AUTHOR_AUTHOR_ID BIGINT,
PJI_SEMINAR_EVENT_ID BIGINT NOT NULL,
PRIMARY KEY (INVITATION_ID),
CONSTRAINT FK_PJI_SEMINAR_ATTD_AUTHOR FOREIGN KEY (PJI_AUTHOR_AUTHOR_ID) REFERENCES
PJI_AUTHOR(AUTHOR_ID),
CONSTRAINT FK_PJI_SEMINAR_ATTD_SEMINAR FOREIGN KEY (PJI_SEMINAR_EVENT_ID) REFERENCES
PJI_SEMINAR(EVENT_ID)
);
CREATE TABLE PJI_SEM_SPONSOR (
AMOUNT DECIMAL(10,2) NOT NULL COMMENT 'AMOUNT COST',
PJI_SEMINAR_EVENT_ID BIGINT,
PJI_SPONSOR_SPONSOR_ID BIGINT NOT NULL,
PRIMARY KEY (PJI_SEMINAR_EVENT_ID, PJI_SPONSOR_SPONSOR_ID),
CONSTRAINT FK_PJI_SEM_SPONSOR_SEMINAR FOREIGN KEY (PJI_SEMINAR_EVENT_ID) REFERENCES
PJI_SEMINAR(EVENT_ID),
CONSTRAINT FK_PJI_SEM_SPONSOR_SPONSOR FOREIGN KEY (PJI_SPONSOR_SPONSOR_ID)
REFERENCES PJI_SPONSOR(SPONSOR_ID)
);
CREATE TABLE PJI_EXH_ATTD (
REG_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'REGISTRATION ID',
PJI_EXHIBITION_EVENT_ID BIGINT,
PJI_CUSTOMER_CUST_ID BIGINT,
PRIMARY KEY (REG_ID),
CONSTRAINT FK_PJI_EXH_ATTD_EXHIBITION FOREIGN KEY (PJI_EXHIBITION_EVENT_ID) REFERENCES
PJI_EXHIBITION(EVENT_ID),
CONSTRAINT FK_PJI_EXH_ATTD_CUSTOMER FOREIGN KEY (PJI_CUSTOMER_CUST_ID) REFERENCES
PJI_CUSTOMER(CUST_ID)
);
-- Create triggers for inheritance constraints
DELIMITER //
CREATE TRIGGER TRG_PJI_ORG_SPONSOR_TYPE
BEFORE INSERT ON PJI_ORG
FOR EACH ROW
BEGIN
DECLARE sponsor_type CHAR(1);
SELECT SPONSOR_TYPE INTO sponsor_type
FROM PJI_SPONSOR
WHERE SPONSOR_ID = NEW.SPONSOR_ID;
IF sponsor_type != 'O' THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'SPONSOR_TYPE must be O for PJI_ORG';
END IF;
END //
CREATE TRIGGER TRG_PJI_INDIVIDUAL_SPONSOR_TYPE
BEFORE INSERT ON PJI_INDIVIDUAL
FOR EACH ROW
BEGIN
DECLARE sponsor_type CHAR(1);
SELECT SPONSOR_TYPE INTO sponsor_type
FROM PJI_SPONSOR
WHERE SPONSOR_ID = NEW.SPONSOR_ID;
IF sponsor_type != 'I' THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'SPONSOR_TYPE must be I for PJI_INDIVIDUAL';
END IF;
END //
CREATE TRIGGER TRG_PJI_EXHIBITION_EVENT_TYPE
BEFORE INSERT ON PJI_EXHIBITION
FOR EACH ROW
BEGIN
DECLARE event_type CHAR(1);
SELECT EVENT_TYPE INTO event_type
FROM PJI_EVENT
WHERE EVENT_ID = NEW.EVENT_ID;
IF event_type != 'E' THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'EVENT_TYPE must be E for PJI_EXHIBITION';
END IF;
END //
CREATE TRIGGER TRG_PJI_SEMINAR_EVENT_TYPE
BEFORE INSERT ON PJI_SEMINAR
FOR EACH ROW
BEGIN
DECLARE event_type CHAR(1);
SELECT EVENT_TYPE INTO event_type
FROM PJI_EVENT
WHERE EVENT_ID = NEW.EVENT_ID;
IF event_type != 'S' THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'EVENT_TYPE must be S for PJI_SEMINAR';
END IF;
END //
DELIMITER ;